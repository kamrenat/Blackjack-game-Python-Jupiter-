{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hello world!\n",
    "\n",
    "This is my first project in Python and in the world of programming, so I will keep it as it was done for the first time by myself. This is the memorial of my start on the journey in the programming world.\n",
    "\n",
    "This \"Python Tic Tac Toe\" game was developed during **\"Complete Python Bootcamp: Go from Zero to hero in Python 3\"** course at Udemy platform as the first milestone project."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 1: Write a function that can print out a board. Set up your board as a list, where each index 1-9 corresponds with a number on a number pad, so you get a 3 by 3 board representation.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import clear_output\n",
    "\n",
    "def display_board(x):\n",
    "    print(f\"     |     |     \\n  {x[1]}  |  {x[2]}  |  {x[3]}  \\n_____|_____|_____\\n     |     |     \\n  {x[4]}  |  {x[5]}  |  {x[6]}  \\n_____|_____|_____\\n     |     |     \\n  {x[7]}  |  {x[8]}  |  {x[9]}  \\n     |     |     \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     |     |     \n",
      "  X  |  O  |     \n",
      "_____|_____|_____\n",
      "     |     |     \n",
      "  O  |  X  |  O  \n",
      "_____|_____|_____\n",
      "     |     |     \n",
      "  X  |  X  |  X  \n",
      "     |     |     \n"
     ]
    }
   ],
   "source": [
    "test_board = ['#','X','O',' ','O','X','O','X','X','X']\n",
    "display_board(test_board)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 2: Write a function that can take in a player input and assign their marker as 'X' or 'O'. Think about using while loops to continually ask until you get a correct answer.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def player_input():\n",
    "    marker = \"\"\n",
    "   \n",
    "    while marker != \"X\" and marker != \"O\":\n",
    "        marker = input(\"What marker would you like to use for Player 1 ('X' or 'O'): \")\n",
    "    \n",
    "    return marker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "player_input()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 3: Write a function that takes in the board list object, a marker ('X' or 'O'), and a desired position (number 1-9) and assigns it to the board.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def place_marker(board, marker, position):\n",
    "    board[position] = marker\n",
    "    return board"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     |     |     \n",
      "  X  |  O  |     \n",
      "_____|_____|_____\n",
      "     |     |     \n",
      "  O  |  X  |  O  \n",
      "_____|_____|_____\n",
      "     |     |     \n",
      "  $  |  X  |  X  \n",
      "     |     |     \n"
     ]
    }
   ],
   "source": [
    "place_marker(test_board,'$',7)\n",
    "display_board(test_board)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 4: Write a function that takes in a board and a mark (X or O) and then checks to see if that mark has won.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def win_check(board):\n",
    "    sequences = []\n",
    "    \n",
    "    # Horizontal combinations\n",
    "    for i in range(1,10,3):\n",
    "        i_sequence = board[i]+board[i+1]+board[i+2]\n",
    "        sequences.append(i_sequence)\n",
    "    \n",
    "    #Vertical combinations\n",
    "    for i in range(1,4):\n",
    "        i_sequence = board[i]+board[i+3]+board[i+6]\n",
    "        sequences.append(i_sequence)\n",
    "    \n",
    "    # Diagonals\n",
    "    diagonal_1 = board[1]+board[5]+board[9]\n",
    "    diagonal_2 = board[3]+board[5]+board[7]\n",
    "    sequences.append(diagonal_1)\n",
    "    sequences.append(diagonal_2)\n",
    "    \n",
    "    winner = 0\n",
    "    #Return if the player wins\n",
    "    for num in range(0,8):\n",
    "        if sequences[num] == \"XXX\" or sequences[num] == \"OOO\":\n",
    "            winner = 1\n",
    "        else:\n",
    "            pass\n",
    "        \n",
    "    return winner == 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 5: Write a function that uses the random module to randomly decide which player goes first. You may want to lookup random.randint() Return a string of which player went first.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def choose_first():\n",
    "    player_number = random.randint(1,2)\n",
    "    print(f\"Player {player_number} goes first!\")\n",
    "    return player_number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Player 2 goes first!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "choose_first()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 6: Write a function that returns a boolean indicating whether a space on the board is freely available.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def space_check(board, position):\n",
    "    return board[position] == \" \""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "space_check(test_board, 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 7: Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def full_board_check(board):\n",
    "    return \" \" not in board"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_board_check(test_board)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 8: Write a function that asks for a player's next position (as a number 1-9) and then uses the function from step 6 to check if it's a free position. If it is, then return the position for later use.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def player_choice(board):\n",
    "    position = 0\n",
    "    while position not in range(1,10,1) or board[position] != \" \":\n",
    "        position = int(input(\"Enter your position (1-9): \"))\n",
    "  \n",
    "    return position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "player_choice(test_board)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 9: Write a function that asks the player if they want to play again and returns a boolean True if they do want to play again.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def replay():\n",
    "    replay_decision = \"\"\n",
    "    while replay_decision != \"Y\" and replay_decision != \"N\":\n",
    "        replay_decision = input(\"Do you want to play again (Y/N): \")\n",
    "    return replay_decision == \"Y\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "replay()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Step 10: Here comes the hard part! Use while loops and the functions you've made to run the game!**\n",
    "\n",
    "# The game begins!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     |     |     \n",
      "  O  |  X  |  O  \n",
      "_____|_____|_____\n",
      "     |     |     \n",
      "  X  |  O  |  X  \n",
      "_____|_____|_____\n",
      "     |     |     \n",
      "  O  |     |     \n",
      "     |     |     \n",
      "\n",
      "Player 2 has win\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to play again (Y/N):  N\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thank you for the game!\n"
     ]
    }
   ],
   "source": [
    "from IPython.display import clear_output\n",
    "import random\n",
    "\n",
    "############################# Starting screen #########################\n",
    "\n",
    "print('Welcome to Tic Tac Toe!\\n')\n",
    "\n",
    "#Player 1 marker\n",
    "player_1_marker = player_input()\n",
    "\n",
    "#Player 2 marker\n",
    "if player_1_marker == \"X\":\n",
    "    player_2_marker = \"O\"\n",
    "else:\n",
    "    player_2_marker = \"X\"\n",
    "\n",
    "\n",
    "############################# Game code ################################\n",
    "    \n",
    "replay_game = True\n",
    "while replay_game is True:\n",
    "    \n",
    "    #Clear screen before game start\n",
    "    clear_output()\n",
    "    \n",
    "    #Print players markers\n",
    "    print(f'Player 1 marker is {player_1_marker}')\n",
    "    print(f'Player 2 marker is {player_2_marker}')\n",
    "    \n",
    "    #Select who turns first\n",
    "    first_turn = choose_first()\n",
    "    second_turn = 0\n",
    "    if first_turn == 1:\n",
    "        second_turn = 2\n",
    "    else:\n",
    "        second_turn = 1\n",
    "\n",
    "    # Select marker (technical)\n",
    "    if first_turn == 1:\n",
    "        marker_turn_1 = player_1_marker\n",
    "        marker_turn_2 = player_2_marker\n",
    "    else:\n",
    "        marker_turn_1 = player_2_marker\n",
    "        marker_turn_2 = player_1_marker\n",
    "\n",
    "\n",
    "    #Import clean board\n",
    "    board = ['#',' ',' ',' ',' ',' ',' ',' ',' ',' ']\n",
    "    display_board(board)\n",
    "\n",
    "    #Loop for the game\n",
    "    while full_board_check(board) is False:\n",
    "\n",
    "    #Player 1 choice\n",
    "        step_turn_1 = player_choice(board)\n",
    "        place_marker(board, marker_turn_1, step_turn_1)\n",
    "        clear_output()\n",
    "        display_board(board)\n",
    "        if win_check(board) is True:\n",
    "            print(f\"\\nPlayer {first_turn} has win\")\n",
    "            break\n",
    "        if full_board_check(board) is True:\n",
    "            print(\"DRAW!\")\n",
    "            break\n",
    "\n",
    "    #Player 2 choice\n",
    "        step_turn_2 = player_choice(board)\n",
    "        place_marker(board, marker_turn_2, step_turn_2)\n",
    "        clear_output()\n",
    "        display_board(board)\n",
    "        if win_check(board) is True:\n",
    "            print(f\"\\nPlayer {second_turn} has win\")\n",
    "            break\n",
    "        if full_board_check(board) is True:\n",
    "            print(\"DRAW!\")\n",
    "            break\n",
    "\n",
    "    #Do you want to replay the game?\n",
    "    replay_game = replay()\n",
    "\n",
    "############################# Game end ################################\n",
    "   \n",
    "print(\"Thank you for the game!\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
